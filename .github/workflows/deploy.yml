name: Deploy Node.js API

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      job:
        description: 'Job to run'
        required: true
        type: choice
        options:
          - build
          - build2
          - build3

jobs:
  deploy:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        job: [build, build2, build3]
    if: github.event_name == 'push' || github.event.inputs.job == matrix.job

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        if: matrix.job == 'build'
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        if: matrix.job == 'build'
        run: npm install

      - name: Build Docker image
        if: matrix.job == 'build'
        run: docker build -t bharath7898/my-api:latest .

      - name: Login to DockerHub
        if: matrix.job == 'build2'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        if: matrix.job == 'build2'
        run: |
          docker tag bharath7898/my-api:latest bharath7898/my-api:v1.0.4
          docker push bharath7898/my-api:v1.0.4

      - name: Deploy to EC2
        if: matrix.job == 'build3'
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2-key.pem
          chmod 400 ec2-key.pem
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem $EC2_USER@$EC2_HOST <<EOF
            sudo dnf update -y
            sudo dnf install docker -y
            sudo systemctl start docker
            sudo usermod -a -G docker $EC2_USER
            sudo systemctl enable docker
          EOF

      - name: Restart SSH Session and Deploy
        if: matrix.job == 'build3'
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem $EC2_USER@$EC2_HOST <<EOF
            docker pull bharath7898/my-api:v1.0.4
            docker stop my-api || true
            docker rm my-api || true
            docker stop mongo || true
            docker rm mongo || true
            docker run -d --name mongo -v mongo-data:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin -e MONGO_INITDB_DATABASE=mydatabase -p 27017:27017 mongo:4.4.6
            docker run -d --name my-api -p 80:3000 --link mongo -e MONGODB_URI=mongodb://admin:admin@mongo:27017/mydatabase?authSource=admin bharath7898/my-api:v1.0.4
          EOF
